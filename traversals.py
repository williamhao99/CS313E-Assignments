"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, William Hao and Andrew Kim, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: wah938
UT EID 2: ak54655
"""


def row_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    left-to-right and right-to-left traversal for each row from
    top-to-bottom, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    traversal = []
    rows = len(grid)
    cols = len(grid[0])
    going_right = True

    for row in range(rows):

        if going_right:
            for col in range(0, cols, 1):
                traversal.append((row, col))
        if not going_right:
            for col in range(cols-1, -1, -1):
                traversal.append((row, col))

        going_right = not going_right

    return traversal


def column_zigzag_traversal(grid):
    """
    Performs a zigzag traversal of a 2D list, alternating between
    top-to-bottom and bottom-to-top traversal for each column from
    left-to-right, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    traversal = []
    rows = len(grid)
    cols = len(grid[0])
    going_down = True

    for col in range(cols):

        if going_down:
            for row in range(0, rows, 1):
                traversal.append((row, col))
        if not going_down:
            for row in range(rows-1, -1, -1):
                traversal.append((row, col))

        going_down = not going_down

    return traversal


def main_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from
    the top-right to the bottom-left in the direction of the
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    # start from last column to first column
    # then start from 2nd row to last row

    traversal = []
    rows = len(grid)
    cols = len(grid[0])

    for starting_column in range(cols-1, -1, -1):
        row = 0
        col = starting_column
        while row < rows and col < cols:
            traversal.append((row, col))
            row += 1
            col += 1

    for starting_row in range(1, rows):
        row = starting_row
        col = 0
        while row < rows and col < cols:
            traversal.append((row, col))
            row += 1
            col += 1

    return traversal


def secondary_diagonal_traversal(grid):
    """
    Performs a diagonal traversal of a 2D list, iterating from
    the top-left to the bottomt-right in the direction of the
    main diagonal, and returns a list of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    # start from first column to last column
    # then start from 2nd row to last row

    traversal = []
    rows = len(grid)
    cols = len(grid[0])

    for starting_column in range(0, cols, 1):
        row = 0
        col = starting_column
        while row < rows and col >= 0:
            traversal.append((row, col))
            row += 1
            col -= 1

    for starting_row in range(1, rows):
        row = starting_row
        col = cols-1
        while row < rows and col >= 0:
            traversal.append((row, col))
            row += 1
            col -= 1

    return traversal


def spiral_traversal(grid):
    """
    Performs a spiral traversal of a 2D list, iterating from
    the outside rows and columns inward, and returns a list
    of coordinates (row, column).

    pre:
    - grid is a 2D list representing a 2D matrix.
    - The rows and columns range from 1 to 10 (inclusive).
    - All rows in grid have the same number of columns.

    post:
    - Returns a list of tuples (row, column) representing the
      coordinates of all elements in the specified order.
    """

    # start moving right; add 1 to column val
    # if col+1 = cols, then change direction to down - add 1 to row val
    # so on,

    traversal = []
    rows = len(grid)
    cols = len(grid[0])

    visited_grid = [] # make a visited grid, set it to all false initially
    for _ in range(rows):
        row = []
        for _ in range(cols):
            row.append(False)
        visited_grid.append(row)


    current_row = 0
    current_col = 0
    directions = [[0, 1], [1, 0], [0, -1], [-1, 0]] # right, down, left, up
    current_direction = 0 # starts by moving right. directions[current_direction] = movement vector

    for _ in range(rows * cols):
        traversal.append((current_row, current_col))
        visited_grid[current_row][current_col] = True

        next_row = current_row + directions[current_direction][0]
        next_col = current_col + directions[current_direction][1]

        if(next_row < 0 or next_row >= rows
           or next_col < 0 or next_col >= cols
           or visited_grid[next_row][next_col]):
            # if any of the above are true, then direction change needed
            current_direction = (current_direction + 1) % 4
            next_row = current_row + directions[current_direction][0]
            next_col = current_col + directions[current_direction][1]

        current_row = next_row
        current_col = next_col

    return traversal
