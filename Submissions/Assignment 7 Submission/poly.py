"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, William Hao, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: wah938
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        # If the coefficient is 0, ignore the term
        if coeff == 0:
            return
        # If the linked list is empty or we have a greatest coefficient,
        # insert the new term as head and link to old head
        if self.head is None or exp > self.head.exp:
            self.head = Node(coeff, exp, self.head)
            return
        # If the exponent of the term is equal to the head, add the coefficients together
        if exp == self.head.exp:
            self.head.coeff += coeff
            # If coefficient becomes 0, remove this node
            if self.head.coeff == 0:
                self.head = self.head.next
            return

        # start iterating to find correct position, since none of the base cases above were met
        prev = None
        current = self.head
        while current is not None and current.exp > exp:
            prev = current
            current = current.next
        # Now we are at a node, current, that has an exponent <= as the term being inserted.
        # If the exponent of the term is equal to the current node, add the coefficients together
        if current is not None and current.exp == exp:
            current.coeff += coeff
            # Again, if coefficient becomes 0, remove this node
            if current.coeff == 0:
                prev.next = current.next
        # Else, exponent of the term > exponent of current node. Insert the term in current position
        else:
            prev.next = Node(coeff, exp, current)

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        # Create a new linked list to store the result
        result = LinkedList()
        # Since insert_term method already handles adding coefficients of terms with same exponent,
        # we can simply iterate through both polynomials and insert all terms into the result list.
        # iterate through first polynomial
        current_node = self.head
        while current_node is not None:
            result.insert_term(current_node.coeff, current_node.exp)
            current_node = current_node.next
        # iterate through second polynomial
        current_node = p.head
        while current_node is not None:
            result.insert_term(current_node.coeff, current_node.exp)
            current_node = current_node.next

        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        # Polynomial multiplication is multiplying each term in the first polynomial
        # with each term in the second polynomial - iterate with nested loops.
        # Use insert_term to easily add the resulting terms of the product polynomial
        result = LinkedList()
        # iterate through first polynomial
        current_node = self.head
        while current_node is not None:
            # iterate through second polynomial
            current_node2 = p.head
            while current_node2 is not None:
                # Multiply the coefficients and add the exponents
                result.insert_term(current_node.coeff * current_node2.coeff,
                                    current_node.exp + current_node2.exp)
                current_node2 = current_node2.next
            current_node = current_node.next
        return result

    # Return a string representation of the polynomial.
    def __str__(self):
        result = ""
        # If the linked list is empty, return an empty string
        if self.head is None:
            return result
        # Otherwise, iterate through the linked list and build the string
        current_node = self.head
        while current_node is not None:
            result += str(current_node) # using __str__ method of Node class
            current_node = current_node.next
            if current_node is not None:
                result += " + "
        return result


def main():
    # read data from stdin (terminal/file) using input() and create polynomial p

    # read data from stdin (terminal/file) using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product

    poly1_terms = int(input())
    poly1 = LinkedList()
    for _ in range(poly1_terms):
        arr = input().split()
        coeff = int(arr[0])
        exp = int(arr[1])
        poly1.insert_term(coeff, exp)

    # empty line in the input file, ignore
    input()

    poly2_terms = int(input())
    poly2 = LinkedList()
    for _ in range(poly2_terms):
        arr = input().split()
        coeff = int(arr[0])
        exp = int(arr[1])
        poly2.insert_term(coeff, exp)

    # add the polynomials
    sum_poly = poly1.add(poly2)
    print(sum_poly)
    # multiply the polynomials
    product_poly = poly1.mult(poly2)
    print(product_poly)


if __name__ == "__main__":
    main()
