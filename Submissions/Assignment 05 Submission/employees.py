"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, William Hao, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: wah938
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True

        self.__name = name
        self.__manager = manager
        self.__performance = INITIAL_PERFORMANCE
        self.__happiness = INITIAL_HAPPINESS
        self.__salary = salary

    @property
    def name(self):
        """Returns the name of the employee"""
        return self.__name

    @property
    def manager(self):
        """Returns the employee's manager"""
        return self.__manager

    @property
    def performance(self):
        """Returns the employee's performance"""
        return self.__performance

    @performance.setter
    def performance(self, perf):
        """Sets performance and ensures it stays between 0-100"""
        if perf > PERCENTAGE_MAX:
            self.__performance = PERCENTAGE_MAX
        elif perf < PERCENTAGE_MIN:
            self.__performance = PERCENTAGE_MIN
        else:
            self.__performance = perf

    @property
    def happiness(self):
        """Returns the employee's happiness"""
        return self.__happiness

    @happiness.setter
    def happiness(self, h):
        """Sets happiness and ensures it stays between 0-100"""
        if h > PERCENTAGE_MAX:
            self.__happiness = PERCENTAGE_MAX
        elif h < PERCENTAGE_MIN:
            self.__happiness = PERCENTAGE_MIN
        else:
            self.__happiness = h

    @property
    def salary(self):
        """Returns the employee's salary"""
        return self.__salary

    @salary.setter
    def salary(self, sal):
        """Sets salary and ensures it is non-negative"""
        if sal < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self.__salary = sal

    # other methods

    @abstractmethod
    def work(self):
        """Pass this method to the subclasses"""

    def interact(self, other):
        """Simulates an interaction between this employee and another employee (other)."""
        # initialize if not existing
        if other.name not in self.relationships:
            self.relationships[other.name] = 0

        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1 # positive relationship, improves happiness
        elif (self.happiness >= HAPPINESS_THRESHOLD) and (other.happiness >= HAPPINESS_THRESHOLD):
            self.relationships[other.name] += 1 # improve their relationship
        else:
            self.relationships[other.name] -= 1 # can be negative
            self.happiness -= 1 # bad interaction

    def daily_expense(self):
        """Simulates the employeeâ€™s daily expenses by reducing their happiness and savings."""
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return (
            f"{self.name}\n"
            f"\tSalary: ${self.salary}\n"
            f"\tSavings: ${self.savings}\n"
            f"\tHappiness: {self.happiness}%\n"
            f"\tPerformance: {self.performance}%"
                )


class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """

    def work(self):
        """Simulates 1 hour of work for the manager."""
        performance_fluctuation = random.randint(-5, 5)
        self.performance += performance_fluctuation

        if performance_fluctuation <= 0:
            self.happiness -= 1 # reduce happiness
            for employee_name in self.relationships:
                self.relationships[employee_name] -= 1 # relationships worsen
        else:
            self.happiness += 1


class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """

    def work(self):
        performance_fluctuation = random.randint(-15, 15)
        self.performance += performance_fluctuation

        if performance_fluctuation <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        super().interact(other) # interact with other employee using the Employee class's interact()

        if other is self.manager:
            if ((self.manager.happiness > HAPPINESS_THRESHOLD)
            and (self.performance > TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD)):
                self.savings += MANAGER_BONUS
            elif self.manager.happiness <= HAPPINESS_THRESHOLD:
                self.salary = self.salary // 2
                self.happiness -= 5
                if self.salary == 0:
                    self.is_employed = False


class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """

    def work(self):
        performance_fluctuation = random.randint(-10, 10)
        self.performance += performance_fluctuation

        if performance_fluctuation >= 0:
            self.happiness += 1

    def interact(self, other):
        super().interact(other) # interact with other employee using the Employee class's interact()

        if other is self.manager:
            if((self.manager.happiness > HAPPINESS_THRESHOLD)
            and (self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD)):
                self.savings += MANAGER_BONUS
            elif self.manager.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1
