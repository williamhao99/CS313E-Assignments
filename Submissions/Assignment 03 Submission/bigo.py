"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <William Hao>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: wah938
"""

def length_of_longest_substring_n3(s):
    """
    Finds the length of the longest substring without repeating characters
    using a brute force approach (O(N^3)).

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
      in s that contains no repeating characters.
    """

    max_len = 0

    for index, _ in enumerate(s): # Forced to use enumerate for pylint; get index & not char, O(N)
        test_str = ""
        rest_of_string = s[index:len(s)]

        for _, other_ch in enumerate(rest_of_string): # get char only from rest of string, O(N)
            if other_ch in test_str: # O(N)
                break
            test_str += other_ch
            max_len = max(max_len, len(test_str))

    return max_len


def length_of_longest_substring_n2(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N^2)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """

    # I used a dictionary instead of frequency list
    max_len = 0

    for index, _ in enumerate(s):
        existing = {} # use a dict for o(1) lookup
        rest_of_string = s[index:len(s)]

        for _, other_ch in enumerate(rest_of_string):
            if other_ch in existing:
                break
            existing[other_ch] = True # to track seen character
            max_len = max(max_len, len(existing)) # dictionary length is substring length

    return max_len

def length_of_longest_substring_n(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list. However, this approach stops early, breaking out of the inner
    loop when a repeating character is found. You may also choose to challenge
    yourself by implementing a sliding window approach.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """

    # sliding window approach - also using a dictionary
    max_len = 0
    existing = {}
    left_index = 0

    for right_index, ch in enumerate(s):
        if ch in existing and existing[ch] >= left_index:
            left_index = existing[ch] + 1 # shift left all the way past duplicate

        existing[ch] = right_index # the last seen index of a char
        max_len = max(max_len, right_index - left_index + 1)

    return max_len
