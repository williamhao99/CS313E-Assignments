"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, <William Hao>, this programming assignment is my own work
and I have not provided this code to any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID: wah938
"""

def hamming_distance(a_data, b_data):
    """
    Determine the Hamming distance between two lists of ints.

    pre: a_data is not None, b_data is not None, len(a_data) == len(b_data)
    post: return the Hamming Distance between the two lists of ints.
    Neither the parameter a_data nor b_data are altered as a result of this
    function.
    """

    hamming_dist = 0

    for index, element in enumerate(a_data):
        if element != b_data[index]:
            hamming_dist += 1

    return hamming_dist


def is_permutation(a_data, b_data):
    """
    Determine whether integer lists a_data and b_data are permutations of each
    other.

    pre: a_data is not None, b_data is not None, and both lists only contain
    integers
    post: return True if a_data is a permutation of b_data, False otherwise.
    Neither a_data nor b_data are altered as a result of this function.
    """

    dict_a = {}
    dict_b = {}

    for number in a_data:
        dict_a[number] = dict_a.get(number, 0) + 1

    for number in b_data:
        dict_b[number] = dict_b.get(number, 0) + 1

    return dict_a == dict_b


def most_vowels(list_of_strings):
    """
    Determine the index of the string that has the largest number of vowels.
    Vowels are defined as 'A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', and 'u'.

    pre: list_of_strings is not None, len(list_of_strings) > 0, and there is at
    least 1 element in list_of_strings that is not None.
    post: return the index of the element in list_of_strings that has
    the largest number of vowel characters and is not None.
    If there is a tie, return whichever of the tied indices is closest to zero.
    The empty string, "", has zero vowels. It is possible for the maximum
    number of vowels to be 0.
    The parameter list_of_strings is not altered as a result of this function.
    """

    index_of_string = 0
    max_vowels = 0
    vowels = "AaEeIiOoUu"

    for index, string in enumerate(list_of_strings):
        if string is None:
            continue

        vowel_count = 0
        for character in string:
            if character in vowels:
                vowel_count += 1

        if vowel_count > max_vowels:
            max_vowels = vowel_count
            index_of_string = index

    return index_of_string
